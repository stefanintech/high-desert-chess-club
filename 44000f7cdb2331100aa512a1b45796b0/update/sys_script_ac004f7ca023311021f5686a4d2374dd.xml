<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_1107092_high_d_0_event</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_1107092_high_d_0_event">capacityVALCHANGES^ORwaitlist_sizeVALCHANGES^stateIN1,2^EQ<item endquery="false" field="capacity" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="waitlist_size" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item display_value="1,2" endquery="false" field="state" goto="false" newquery="false" operator="IN" or="false" value="1,2"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Adjust attendance after Capacity changes</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    // Count the number of confirmed attendees
    var attendeeAggregate = new GlideAggregate('x_1107092_high_d_0_attendee');
    attendeeAggregate.addQuery('event_name', current.sys_id);
    attendeeAggregate.addQuery('attendee_status', 'confirmed');
    attendeeAggregate.addAggregate('COUNT');
    attendeeAggregate.query();
    var confirmedCount = 0;
    if (attendeeAggregate.next()) {
        confirmedCount = parseInt(attendeeAggregate.getAggregate('COUNT'));
    }
    // Compare the number of currently confirmed attendees to our new event capacity
    // If we have new room in the event, pull in people from the waitlist
    var diff = current.capacity - confirmedCount;
    if (diff > 0) {
        // There is newly found capacity in the event, so check our waitlist 
        // and confirm people on first come first server basis
        var waitlisted = new GlideRecord('x_1107092_high_d_0_attendee');
        waitlisted.addQuery('event_name', current.sys_id);
        waitlisted.addQuery('attendee_status', 'waitlisted');
        waitlisted.orderBy('number');
        waitlisted.setLimit(diff);
        waitlisted.query();
        while (waitlisted.next()) {
            waitlisted.setValue('attendee_status', 'confirmed');
            waitlisted.update();
        }
        var attendeeCount = new EventRegistrationAggregate().runAggregate('x_1107092_high_d_0_attendee', 'attendee_status=confirmed^event_name=' + current.sys_id, 'COUNT');
        current.attendees = attendeeCount;
    }
    // Count the number of confirmed attendees
    var waitlistedAggregate = new GlideAggregate('x_1107092_high_d_0_attendee');
    waitlistedAggregate.addQuery('event_name', current.sys_id);
    waitlistedAggregate.addQuery('attendee_status', 'waitlisted');
    waitlistedAggregate.addAggregate('COUNT');
    waitlistedAggregate.query();
    var waitlistedCount = 0;
    if (waitlistedAggregate.next()) {
        waitlistedCount = parseInt(waitlistedAggregate.getAggregate('COUNT'));
    }
    // Compare the number of currently confirmed attendees to our new event capacity
    // If we have new room in the event, pull in people from the waitlist
    var waitlistDiff = current.waitlist_size - waitlistedCount;
    if (waitlistDiff > 0) {
        // There is newly found capacity in the event, so check our waitlist 
        // and confirm people on first come first server basis
        var onHold = new GlideRecord('x_1107092_high_d_0_attendee');
        onHold.addQuery('event_name', current.sys_id);
        onHold.addQuery('attendee_status', 'on_hold');
        onHold.orderBy('number');
        onHold.setLimit(waitlistDiff);
        onHold.query();
        while (onHold.next()) {
            onHold.setValue('attendee_status', 'waitlisted');
            onHold.update();
        }
        var waitlistCount = new EventRegistrationAggregate().runAggregate('x_1107092_high_d_0_attendee', 'attendee_status=waitlisted^event_name=' + current.sys_id, 'COUNT');
        current.waitlisted = waitlistCount;
    }
    current.update();

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-01-03 05:51:16</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ac004f7ca023311021f5686a4d2374dd</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Adjust attendance after Capacity changes</sys_name>
        <sys_overrides/>
        <sys_package display_value="High Desert Chess Club" source="x_1107092_high_d_0">44000f7cdb2331100aa512a1b45796b0</sys_package>
        <sys_policy/>
        <sys_scope display_value="High Desert Chess Club">44000f7cdb2331100aa512a1b45796b0</sys_scope>
        <sys_update_name>sys_script_ac004f7ca023311021f5686a4d2374dd</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-01-03 05:51:16</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ac004f7ca023311021f5686a4d2374dd"/>
</record_update>
